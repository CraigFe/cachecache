module DLList
  use int.Int
  use mach.int.Int63
  use option.Option
  use array.Array

  type t 'a = {
    contents: array 'a;
    witness: 'a;
    prev: array int;
    next: array int;
    mutable first: int;
    mutable last: int;
    cap: int;
    mutable size: int;
    ghost occupied : array bool;
  }
  invariant { Array.length contents = cap }
  invariant { Array.length prev = cap }
  invariant { Array.length next = cap }
  invariant { Array.length occupied = cap }
  
  invariant { cap >= 1 }
  invariant { 0 <= size <= cap }
  invariant { first = -1 <-> last = -1 <-> size = 0 }
  
  invariant { size <> 0 -> cap - size <= first < cap /\ cap - size <= last < cap }
  invariant { size <> 0 -> size <> cap -> first = cap - size }
  
  invariant { size = cap -> (next[first] = -1 <-> prev[last] = -1 <-> cap = 1) }
  
  invariant { forall i. 0 <= i < cap - size            -> occupied[i] = false }
  invariant { forall i.          cap - size <= i < cap -> occupied[i] = true }
  
  invariant { forall i. 0 <= i < cap -> occupied[i] = true -> i <> last -> 0 <= next[i] < cap }
  invariant { forall i. 0 <= i < cap -> occupied[i] = true -> i <> first -> 0 <= prev[i] < cap }
  invariant { forall i. 0 <= i < cap -> occupied[i] = false -> 
                next[i] = -1 /\ prev[i] = -1 /\ contents[i] = witness }

  invariant { size <> 0 -> occupied[last] = true /\ next[last] = -1 }
  invariant { size <> 0 -> occupied[first] = true /\ prev[first] = -1 }
  by { 
    contents = Array.make 1 (any 'a);
    witness = any 'a;
    prev = Array.make 1 (-1);
    next = Array.make 1 (-1);
    first = 0;
    last = 0;
    cap = 1;
    size = 1;
    occupied = Array.make 1 true;
  }
  
  let create witness c
  requires { c >= 1 }
  =
  {
    contents = Array.make c witness;
    witness = witness;
    prev = Array.make c (-1);
    next = Array.make c (-1);
    first = -1;
    last = -1;
    cap = c;
    size = 0;
    occupied = Array.make c false;
  }
  
  let clear t
  =
  t.first <- -1;
  t.last <- -1;
  t.size <- 0;
  for i = 0 to t.cap - 1 do
    invariant { forall j. 0 <= j < i -> t.occupied[j] = false }
    invariant { forall j. 0 <= j < i -> t.next[j] = -1 }
    invariant { forall j. 0 <= j < i -> t.prev[j] = -1 }
    invariant { forall j. 0 <= j < i -> t.contents[j] = t.witness }
    t.contents[i] <- t.witness;
    t.prev[i] <- -1;
    t.next[i] <- -1;
    t.occupied[i] <- false;
  done
  
  let append t v 
  =
  let removed =
    if t.size = 0 then (
      let index = t.cap - 1 in
      t.contents[index] <- v;
      t.occupied[index] <- true;
      t.last <- index;
      t.first <- index;
      t.size <- t.size + 1;
      None
    )
    else if t.size < t.cap then (
      let index = t.first - 1 in
      t.contents[index] <- v;
      t.occupied[index] <- true;
      t.next[index] <- t.first;
      t.prev[t.first] <- index;
      t.first <- index;
      t.size <- t.size + 1;
      None
    )
    else (* the structure is full *) (
      assert { t.size = t.cap };
      assert { t.next[t.first] = -1 <-> t.prev[t.last] = -1 <-> t.cap = 1 };
      assert { t.cap > 1 };
      assert { t.first <> t.last };
      assert {t.prev[t.last] <> -1};
      let removed = Some t.contents[t.last] in
      let old_last = t.last in
      t.last <- t.prev[old_last];
      t.contents[old_last] <- v;
      t.next[t.prev[old_last]] <- -1;
      t.prev[old_last] <- -1;
      t.next[old_last] <- t.first;
      t.prev[t.first] <- old_last;
      t.first <- old_last;
      removed
    )
  in
  t.first, removed
  
  let promote t i
  =
  t.next[t.prev[i]] <- t.next[i];
  t.prev[t.next[i]] <- t.prev[i];
  t.prev[t.first] <- i;
  t.next[i] <- t.first;
  t.prev[i] <- -1;
  t.first <- i;
  t.first
  
  let get t i
  = t.contents[i]
  
  let length t
  = Int63.of_int t.size
end

module Impl

  use DLList
  use int.Int
  use mach.int.Int63
  use option.Option
  use ocaml.Exceptions
  use map.Map
  use export fmap.Fmap

  exception Invalid_argument string

  scope Make
 
    scope K
      type key
      val equal (_: key) (_: key) : bool
      val witness () : key
    end

  scope H
    type t 'v = abstract {
      mutable to_fmap: fmap K.key 'v;
    }
    meta coercion function to_fmap

    val create (_: int63) : t 'v
      ensures { result.to_fmap = empty }

    val mem (m: t 'v) (k: K.key) : bool
      ensures { result <-> mem k m }

    val add (m: t 'v) (k: K.key) (v: 'v) : unit
      writes  { m }
      ensures { m = add k v (old m) }

    val find (m: t 'v) (k: K.key) : 'v
      ensures { S.mem k m.domain }
      ensures { result = m[k] }
      raises  { Not_found ->  not (S.mem k m.domain) }

    val remove (m: t 'v) (k: K.key) : unit
      writes  { m }
      ensures { m = remove k (old m) }

    val clear (m: t 'v) : unit
      writes  { m }
      ensures { m = empty }
  end
  
    type t 'a = {
      tbl: H.t (int, 'a);
      lst: DLList.t K.key;
      cap : int63;
      mutable ghost assoc: K.key -> option 'a;
      mutable ghost age: K.key -> int63
    }
    invariant { cap > 0 }
    invariant { forall k. age k >= cap <-> assoc k = None }

    let unsafe_v (c: int63)
      requires { c > 0 }
      ensures { forall k. result.assoc k = None }
      ensures { result.cap = c }
    =
    let witness = K.witness () in
    { 
      tbl = H.create c;
      lst = DLList.create witness (Int63.to_int c);
      cap = c; 
      assoc = (fun _ -> None); 
      age = (fun _ -> c)
    }
      
    let v (c: int63) : t 'a
      raises { Invalid_argument _ -> c <= 0 }
      ensures { forall k. result.assoc k = None }
      ensures { result.cap = c }
    =
    if c <= 0 
    then raise Invalid_argument "capacity must be strictly positive"
    else unsafe_v c

    let clear (t: t 'a) 
      ensures { forall k. t.assoc k = None }
    =
    H.clear t.tbl;
    DLList.clear t.lst

    let is_empty (t: t 'a)
      ensures { result = true <-> forall k. t.assoc k = None }
    = DLList.length t.lst = 0

    let capacity t 
      ensures { result = t.cap }  
    = t.cap
    
    let mem (k: K.key) (t: t 'a) : bool 
      ensures { result = true <-> t.assoc k <> None }
    =
    H.mem t.tbl k
    
    let find (k: K.key) (t: t 'a) : 'a
      ensures { Some result = t.assoc k }
      raises { Not_found -> t.assoc k = None }
    = 
    let _index, value = H.find t.tbl  k in
    value
    
    let find_opt (k: K.key) (t: t 'a) : option 'a 
      ensures { result = t.assoc k }
    =
    try Some (find k t) with Not_found -> None end
      
    let add (k: K.key) (v: 'a) (t: t 'a) : unit 
    =
    try
      let index, _value = H.find t.tbl k in
      let new_index = DLList.promote t.lst index in
      H.add t.tbl k (new_index, v) 
    with Not_found ->
      let index, removed = DLList.append t.lst k in
      match removed with
      | None -> ()
      | Some key -> H.remove t.tbl key
      end;
      H.add t.tbl k (index, v)
    end
  end
end
(*
module Correct

  use Impl as L

  clone Lru.Sig with
     type Make.K.key = L.Make.K.key,
     val Make.K.equal = L.Make.K.equal,
     val Make.K.witness = L.Make.K.witness,

     type Make.H.t = L.Make.H.t,
     val Make.H.create = L.Make.H.create,
     val Make.H.mem = L.Make.H.mem,
     val Make.H.is_empty = L.Make.H.is_empty,
     val Make.H.add = L.Make.H.add,
     val Make.H.find = L.Make.H.find,
     val Make.H.find_exn = L.Make.H.find_exn,
     val Make.H.remove = L.Make.H.remove,
     val Make.H.clear = L.Make.H.clear,
 
     type Make.t = L.Make.t,
     val Make.v = L.Make.v,
     val Make.clear = L.Make.clear,
     val Make.is_empty = L.Make.is_empty,
     val Make.capacity = L.Make.capacity,
     val Make.mem = L.Make.mem,
     val Make.find = L.Make.find,
     val Make.find_opt = L.Make.find_opt,
     val Make.add = L.Make.add
end
*)